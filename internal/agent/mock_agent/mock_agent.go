// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_agent is a generated GoMock package.
package mock_agent

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pb "github.com/meshplus/bitxhub-model/pb"
	rpcx "github.com/meshplus/go-bitxhub-client"
	reflect "reflect"
)

// MockAgent is a mock of Agent interface
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
}

// MockAgentMockRecorder is the mock recorder for MockAgent
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// Appchain mocks base method
func (m *MockAgent) Appchain() (*rpcx.Appchain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Appchain")
	ret0, _ := ret[0].(*rpcx.Appchain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Appchain indicates an expected call of Appchain
func (mr *MockAgentMockRecorder) Appchain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Appchain", reflect.TypeOf((*MockAgent)(nil).Appchain))
}

// SyncBlockHeader mocks base method
func (m *MockAgent) SyncBlockHeader(ctx context.Context, ch chan *pb.BlockHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncBlockHeader", ctx, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncBlockHeader indicates an expected call of SyncBlockHeader
func (mr *MockAgentMockRecorder) SyncBlockHeader(ctx, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncBlockHeader", reflect.TypeOf((*MockAgent)(nil).SyncBlockHeader), ctx, ch)
}

// GetBlockHeader mocks base method
func (m *MockAgent) GetBlockHeader(ctx context.Context, begin, end uint64, ch chan *pb.BlockHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeader", ctx, begin, end, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBlockHeader indicates an expected call of GetBlockHeader
func (mr *MockAgentMockRecorder) GetBlockHeader(ctx, begin, end, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeader", reflect.TypeOf((*MockAgent)(nil).GetBlockHeader), ctx, begin, end, ch)
}

// SyncInterchainTxWrapper mocks base method
func (m *MockAgent) SyncInterchainTxWrapper(ctx context.Context, ch chan *pb.InterchainTxWrapper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncInterchainTxWrapper", ctx, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncInterchainTxWrapper indicates an expected call of SyncInterchainTxWrapper
func (mr *MockAgentMockRecorder) SyncInterchainTxWrapper(ctx, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncInterchainTxWrapper", reflect.TypeOf((*MockAgent)(nil).SyncInterchainTxWrapper), ctx, ch)
}

// GetInterchainTxWrapper mocks base method
func (m *MockAgent) GetInterchainTxWrapper(ctx context.Context, begin, end uint64, ch chan *pb.InterchainTxWrapper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterchainTxWrapper", ctx, begin, end, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInterchainTxWrapper indicates an expected call of GetInterchainTxWrapper
func (mr *MockAgentMockRecorder) GetInterchainTxWrapper(ctx, begin, end, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterchainTxWrapper", reflect.TypeOf((*MockAgent)(nil).GetInterchainTxWrapper), ctx, begin, end, ch)
}

// SendTransaction mocks base method
func (m *MockAgent) SendTransaction(tx *pb.Transaction) (*pb.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", tx)
	ret0, _ := ret[0].(*pb.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockAgentMockRecorder) SendTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockAgent)(nil).SendTransaction), tx)
}

// SendIBTP mocks base method
func (m *MockAgent) SendIBTP(ibtp *pb.IBTP) (*pb.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendIBTP", ibtp)
	ret0, _ := ret[0].(*pb.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendIBTP indicates an expected call of SendIBTP
func (mr *MockAgentMockRecorder) SendIBTP(ibtp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendIBTP", reflect.TypeOf((*MockAgent)(nil).SendIBTP), ibtp)
}

// GetIBTPByID mocks base method
func (m *MockAgent) GetIBTPByID(id string) (*pb.IBTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIBTPByID", id)
	ret0, _ := ret[0].(*pb.IBTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIBTPByID indicates an expected call of GetIBTPByID
func (mr *MockAgentMockRecorder) GetIBTPByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIBTPByID", reflect.TypeOf((*MockAgent)(nil).GetIBTPByID), id)
}

// GetChainMeta mocks base method
func (m *MockAgent) GetChainMeta() (*pb.ChainMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainMeta")
	ret0, _ := ret[0].(*pb.ChainMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainMeta indicates an expected call of GetChainMeta
func (mr *MockAgentMockRecorder) GetChainMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainMeta", reflect.TypeOf((*MockAgent)(nil).GetChainMeta))
}

// GetInterchainMeta mocks base method
func (m *MockAgent) GetInterchainMeta() (*rpcx.Interchain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterchainMeta")
	ret0, _ := ret[0].(*rpcx.Interchain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterchainMeta indicates an expected call of GetInterchainMeta
func (mr *MockAgentMockRecorder) GetInterchainMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterchainMeta", reflect.TypeOf((*MockAgent)(nil).GetInterchainMeta))
}
